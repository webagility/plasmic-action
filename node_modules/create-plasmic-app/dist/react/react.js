"use strict";
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactStrategy = void 0;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const cmd_utils_1 = require("../utils/cmd-utils");
const codegen_1 = require("../utils/codegen");
const file_utils_1 = require("../utils/file-utils");
const npm_utils_1 = require("../utils/npm-utils");
exports.reactStrategy = {
  create: (args) =>
    __awaiter(void 0, void 0, void 0, function* () {
      const { projectPath, jsOrTs } = args;
      let { template } = args;
      const createCommand = `npx create-react-app@14.2.18 ${projectPath}`;
      if (!template && jsOrTs === "ts") {
        template = "typescript";
      }
      const templateArg = template ? ` --template ${template}` : "";
      yield (0, cmd_utils_1.spawnOrFail)(`${createCommand}${templateArg}`);
    }),
  installDeps: ({ projectPath, scheme }) =>
    __awaiter(void 0, void 0, void 0, function* () {
      if (scheme === "loader") {
        return yield (0, npm_utils_1.installUpgrade)(
          "@plasmicapp/loader-react",
          {
            workingDir: projectPath,
          }
        );
      } else {
        return yield (0, codegen_1.installCodegenDeps)({ projectPath });
      }
    }),
  overwriteConfig: (args) =>
    __awaiter(void 0, void 0, void 0, function* () {
      // No config to overwrite
    }),
  generateFiles: ({
    scheme,
    projectApiToken,
    projectId,
    projectPath,
    jsOrTs,
  }) =>
    __awaiter(void 0, void 0, void 0, function* () {
      if (scheme === "loader") {
        // Nothing to do
      } else {
        // Delete existing entry point App.tsx and related test
        (0, file_utils_1.deleteGlob)(
          path_1.default.join(projectPath, "src", "App*")
        );
        yield (0, codegen_1.runCodegenSync)({
          projectId,
          projectApiToken,
          projectPath,
        });
        // Pick a page for the entry point App.tsx page
        const config = yield (0, file_utils_1.getPlasmicConfig)(
          projectPath,
          "react",
          scheme
        );
        const pagesDir = path_1.default.join(projectPath, config.srcDir);
        const projectConfig = config.projects.find(
          (p) => p.projectId === projectId
        );
        const globalContextsPath =
          projectConfig &&
          projectConfig.globalContextsFilePath &&
          config.wrapPagesWithGlobalContexts
            ? path_1.default.join(
                projectPath,
                config.srcDir,
                projectConfig.globalContextsFilePath
              )
            : undefined;
        const homeFilePossibilities = glob_1.default.sync(
          path_1.default.join(pagesDir, "**", "@(index|Home|home|Homepage).*")
        );
        // Overwrite App.tsx
        const indexPath = path_1.default.join(
          projectPath,
          "src",
          `App.${jsOrTs}x`
        );
        const content =
          homeFilePossibilities.length > 0
            ? (0, file_utils_1.generateHomePage)(
                homeFilePossibilities[0],
                indexPath,
                globalContextsPath
              )
            : (0, file_utils_1.generateWelcomePage)(config, "react");
        yield fs_1.promises.writeFile(indexPath, content);
      }
      // Deactivate React.StrictMode from index.js or index.tsx
      const indexFileName = path_1.default.join(
        projectPath,
        "src",
        `index.${jsOrTs === "js" ? "js" : "tsx"}`
      );
      let indexFile = (yield fs_1.promises.readFile(indexFileName)).toString();
      indexFile = indexFile.replace("<React.StrictMode>", "");
      indexFile = indexFile.replace("</React.StrictMode>", "");
      yield fs_1.promises.writeFile(indexFileName, indexFile);
      return;
    }),
  build: (args) =>
    __awaiter(void 0, void 0, void 0, function* () {
      const { npmRunCmd, projectPath } = args;
      yield (0, cmd_utils_1.spawnOrFail)(`${npmRunCmd} build`, projectPath);
    }),
};
